#version 330 core
out vec4 fragCol;
in vec3 outPos;
in vec3 outWorld;
in vec3 outNormal;
flat in int outSelected;
flat in uint outType;

uniform float worldTime;
uniform float waterLevel;

uniform float playerX;
uniform float playerY;

uniform int pointX;
uniform int pointY;

float beachSharpness = 1000.0;
float oceanFadeSharpness = 100.0;
vec3 highCol = vec3(0.4, 0.5, 0.55);
vec3 lowCol = vec3(0.1, 0.4, 0.2);
vec3 beachCol = vec3(0.8, 0.76, 0.59);

void main() {
#if 0
  if(distance(vec2(playerX, playerY), outWorld.xz) > 32.0f*8.0f) {
    discard;
  }
#endif
  float pX = float(pointX) + 0.5;
  float pY = float(pointY) + 0.5;
  float of = 1.0 - outPos.y / 512.0;
  float sof = min(max(of - 0.43, 0.0), 1.0);
  float oof = sof*sof*oceanFadeSharpness;
  float t = worldTime*0.01;
  float tc = float(outType)/255.0;
  float stc = min(max(tc - 0.24, 0.0), 1.0);
  float otc = stc*stc*beachSharpness;
  float light = dot(normalize(vec3(0.0, sin(t), cos(t))), outNormal);
  vec3 col = mix(lowCol, highCol, tc);
  col = mix(beachCol, col, min(max(otc, 0.0), 1.0));
  col *= max(light, 0.1);
  fragCol = vec4(col, 1.0);
  fragCol *= float(pX > outWorld.x && pX < outWorld.x + 1.0f &&
      pY > outWorld.z && pY < outWorld.z + 1.0f) + 1.0;
}
