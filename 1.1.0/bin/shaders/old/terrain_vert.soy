#version 330 core
layout(location = 0) in uvec2 inID;

out vec3 outPos;
out vec3 outWorld;
out vec3 outModel;
out vec3 outNormal;
out vec3 outColour;
out vec2 outUV;

flat out uint outType;
flat out int outSelected;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform int debugCol;
uniform int divisions;

uniform int selectedX;
uniform int selectedY;

uniform float playerX;
uniform float playerY;

const vec3 COLS[8] = vec3[8](
  vec3(1.0, 0.0, 0.0),
  vec3(1.0, 0.5, 0.0),
  vec3(1.0, 1.0, 0.0),
  vec3(0.5, 1.0, 0.0),
  vec3(0.0, 1.0, 0.0),
  vec3(0.0, 1.0, 0.5),
  vec3(0.0, 1.0, 1.0),
  vec3(0.0, 0.5, 1.0)
);

const float CUBE[8*5] = float[8*5](
  -0.5f, -0.5f, -0.5f, 0.0f, 0.0f,  /* left   bottom  back  0 */
  -0.5f, 0.5f, -0.5f, 0.0f, 0.5f,   /* left   top     back  1 */
  0.5f, -0.5f, -0.5f, 0.5f, 0.0f,   /* right  bottom  back  2 */
  0.5f, 0.5f, -0.5f, 0.5f, 0.5f,    /* right  top     back  3 */
  -0.5f, -0.5f, 0.5f, 0.0f, 0.0f,   /* left   bottom  front 4 */
  -0.5f, 0.5f, 0.5f, 0.0f, 0.5f,    /* left   top     front 5 */
  0.5f, -0.5f, 0.5f, 0.5f, 0.0f,    /* right  bottom  front 6 */
  0.5f, 0.5f, 0.5f, 0.5f, 0.5f      /* right   top    front 7 */
);

void main() {
  uint ID = inID.x;
  uint dataX = (ID)           & 0x0FFU;
  uint dataY = (ID >> 8U)     & 0x0FFU;
  uint dataH = (ID >> 16U)    & 0xFFFU;
  uint dataV = (ID >> 28U)    & 0xFU;
  uint dataN = (inID.y)       & 0xFFFFFFU;
  uint dataT = (inID.y >> 24U) & 0xFFU;

  float nx = (float((dataN >> 0U) & 0xFFU) - 128.0f) / 127.0;
  float ny = (float((dataN >> 8U) & 0xFFU) - 128.0f) / 127.0;
  float nz = (float((dataN >> 16U) & 0xFFU) - 128.0f) / 127.0;

  float mpx = mod(playerX, 64.0);
  float mpy = mod(playerY, 64.0);

  uint vert = dataV*5U;
  vec3 height = vec3(0.0, float(dataH)/float(divisions), 0.0);
  vec3 offset = vec3(float(dataX), 0.0, float(dataY));
  vec3 pos = vec3(CUBE[vert + 0U], CUBE[vert + 1U], CUBE[vert + 2U]);
  outUV = vec2(CUBE[vert + 3U], CUBE[vert + 4U]);
  outPos = pos + offset + height;
  outWorld = (model * vec4(outPos, 1.0)).xyz;
  outModel = pos;
  outNormal = normalize(vec3(nx, nz, ny));
  outType = dataT;
  outColour = vec3(0.0, 0.0, 0.0);

  outSelected = 
    (uint(selectedX) == dataX && uint(selectedY) == dataY) ? 1 : 0;
  gl_Position = projection * view * model * vec4(outPos, 1.0);
};

