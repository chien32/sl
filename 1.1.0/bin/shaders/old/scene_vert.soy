#version 330 core
layout(location = 0) in uint inID;

out vec3 outModel;
out vec3 outPos;
out vec2 outUV;
out vec4 outCol;
out vec3 outNormal;
out float outAO;
flat out int selected;
flat out int outWater;

uniform float playerX;
uniform float playerY;
uniform float playerZ;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 chCol;

const float CUBE[8*5] = float[8*5](
  -0.5f, -0.5f, -0.5f, 0.0f, 0.0f,  /* left   bottom  back  0 */
  -0.5f, 0.5f, -0.5f, 0.0f, 0.5f,   /* left   top     back  1 */
  0.5f, -0.5f, -0.5f, 0.5f, 0.0f,   /* right  bottom  back  2 */
  0.5f, 0.5f, -0.5f, 0.5f, 0.5f,    /* right  top     back  3 */
  -0.5f, -0.5f, 0.5f, 0.0f, 0.0f,   /* left   bottom  front 4 */
  -0.5f, 0.5f, 0.5f, 0.0f, 0.5f,    /* left   top     front 5 */
  0.5f, -0.5f, 0.5f, 0.5f, 0.0f,    /* right  bottom  front 6 */
  0.5f, 0.5f, 0.5f, 0.5f, 0.5f      /* right   top    front 7 */
);

const float CUBE_W[8*5] = float[8*5](
  -0.5f, -0.5f, -0.5f, 0.0f, 0.0f,  /* left   bottom  back  0 */
  -0.5f, 0.4f, -0.5f, 0.0f, 0.5f,   /* left   top     back  1 */
  0.5f, -0.5f, -0.5f, 0.5f, 0.0f,   /* right  bottom  back  2 */
  0.5f, 0.4f, -0.5f, 0.5f, 0.5f,    /* right  top     back  3 */
  -0.5f, -0.5f, 0.5f, 0.0f, 0.0f,   /* left   bottom  front 4 */
  -0.5f, 0.4f, 0.5f, 0.0f, 0.5f,    /* left   top     front 5 */
  0.5f, -0.5f, 0.5f, 0.5f, 0.0f,    /* right  bottom  front 6 */
  0.5f, 0.4f, 0.5f, 0.5f, 0.5f      /* right   top    front 7 */
);

const vec3 NORMALS[6] = vec3[6](
  vec3(0.0, 0.0, -1.0),
  vec3(0.0, 1.0, 0.0),
  vec3(0.0, 0.0, 1.0),
  vec3(0.0, -1.0, 0.0),
  vec3(-1.0, 0.0, 0.0),
  vec3(1.0, 0.0, 0.0));

int CountBits(int x, int bitlength) {
  int r = 0;
  int i = 0;
  for(i = 0; i < bitlength; i++) {
    r += ((x & (1 << i)) != 0) ? 0 : 1; 
  }
  return r;
}

const float AO[4] = float[4](0.6, 0.7, 0.8, 1.0);

const vec4 COLS[4] = vec4[4](
  vec4(1.0, 1.0, 1.0, 1.0),
  vec4(0.0, 0.0, 1.0, 0.8),
  vec4(0.0, 1.0, 0.0, 1.0),
  vec4(0.0, 0.0, 1.0, 1.0));

void main() {
  vec4 finalCol = vec4(chCol, 1.0);
  vec3 playerPos = vec3(playerX, playerY, playerZ);
  float s = 1.0;
  int i = int(inID);
  int x = (i) & 0x1F;
  int y = (i >> 5) & 0x1F;
  int z = (i >> 10) & 0x1F;
  int v = (i >> 15) & 0x7;
  int n = (i >> 18) & 0x7;
  int ao = (i >> 21) & 0x03;
  int e = (i >> 24) & 0xFF;
  int c = v*5;
  vec3 normal = NORMALS[n];
  vec4 pos;
  vec2 uv;
  if(e == 1) {
    pos = vec4(CUBE_W[c] + x, CUBE_W[c + 1] + z, CUBE_W[c + 2] + y, 1.0);
    uv = vec2(CUBE_W[c + 3], CUBE_W[c + 4]);
  } else {
    pos = vec4(CUBE[c] + x, CUBE[c + 1] + z, CUBE[c + 2] + y, 1.0);
    uv = vec2(CUBE[c + 3], CUBE[c + 4]);
  }
  outUV = uv;
  outPos = (model*pos).xyz;
  outModel = pos.xyz;
  outCol = vec4(COLS[e]);
  outWater = (e);  
  outNormal = normal;
  outAO = AO[ao];
  gl_Position = projection * view * model * pos;
};

